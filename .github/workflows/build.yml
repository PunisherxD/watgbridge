name: Release Prebuilt Binaries

on:
  push:
    paths:
      - state/state.go
  workflow_dispatch:

jobs:

  build-amd64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [amd64]

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc golang
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build
      run: GOARCH=amd64 GOOS=linux go build -o watgbridge_linux_amd64 .

    - name: Get Project Version
      id: get_version
      run: |
        echo "version=$(grep -oP 'WATGBRIDGE_VERSION = \"\K[0-9]+\.[0-9]+\.[0-9]+' state/state.go)" >> $GITHUB_OUTPUT

    - name: Create Release for amd64
      if: always()
      uses: softprops/action-gh-release@v1
      with:
        files: ./watgbridge_linux_amd64
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

  build-arm64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [arm64]

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y golang gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build
      run: CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ GOARCH=arm64 GOOS=linux go build -o watgbridge_linux_aarch64 .

    - name: Get Project Version
      id: get_version
      run: |
        echo "version=$(grep -oP 'WATGBRIDGE_VERSION = \"\K[0-9]+\.[0-9]+\.[0-9]+' state/state.go)" >> $GITHUB_OUTPUT

    - name: Create Release for arm64
      if: always()
      uses: softprops/action-gh-release@v1
      with:
        files: ./watgbridge_linux_aarch64
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [armv7, arm64, x86_64]

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc golang wget unzip
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Set up Android NDK
      run: |
        wget https://dl.google.com/android/repository/android-ndk-r21d-linux-x86_64.zip
        unzip android-ndk-r21d-linux-x86_64.zip
        export ANDROID_NDK_HOME=$PWD/android-ndk-r21d
        export PATH=$PATH:$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin

    - name: Build for armv7
      if: matrix.architecture == 'armv7'
      run: |
        CGO_ENABLED=1 CC=armv7a-linux-androideabi21-clang GOARCH=arm GOOS=android go build -o watgbridge_android_armv7 .

    - name: Build for arm64
      if: matrix.architecture == 'arm64'
      run: |
        CGO_ENABLED=1 CC=aarch64-linux-android21-clang GOARCH=arm64 GOOS=android go build -o watgbridge_android_arm64 .

    - name: Build for x86_64
      if: matrix.architecture == 'x86_64'
      run: |
        CGO_ENABLED=1 CC=x86_64-linux-android21-clang GOARCH=amd64 GOOS=android go build -o watgbridge_android_x86_64 .

    - name: Get Project Version
      id: get_version
      run: |
        echo "version=$(grep -oP 'WATGBRIDGE_VERSION = \"\K[0-9]+\.[0-9]+\.[0-9]+' state/state.go)" >> $GITHUB_OUTPUT

    - name: Create Release for Android
      if: always()
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./watgbridge_android_armv7
          ./watgbridge_android_arm64
          ./watgbridge_android_x86_64
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
