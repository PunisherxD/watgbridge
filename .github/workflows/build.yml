name: Release Prebuilt Binaries

on:
  push:
    paths:
      - state/state.go
  workflow_dispatch:

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [amd64]

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc golang

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build
        run: GOARCH=amd64 GOOS=linux go build -o watgbridge_linux_amd64 .

      - name: Get Project Version
        id: get_version
        run: |
          echo "version=$(grep -oP 'WATGBRIDGE_VERSION = \"\K[0-9]+\.[0-9]+\.[0-9]+' state/state.go)" >> $GITHUB_OUTPUT

      - name: Create Release for amd64
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          files: ./watgbridge_linux_amd64
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-arm64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [arm64]

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y golang gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build
        run: CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ GOARCH=arm64 GOOS=linux go build -o watgbridge_linux_aarch64 .

      - name: Get Project Version
        id: get_version
        run: |
          echo "version=$(grep -oP 'WATGBRIDGE_VERSION = \"\K[0-9]+\.[0-9]+\.[0-9]+' state/state.go)" >> $GITHUB_OUTPUT

      - name: Create Release for arm64
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          files: ./watgbridge_linux_aarch64
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android-armv7:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip -O android-ndk.zip
          unzip android-ndk.zip -d $HOME
          export ANDROID_NDK_HOME=$HOME/android-ndk-r26d
          export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build
        run: |
          export CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi31-clang
          CGO_ENABLED=1 GOARCH=arm GOOS=android go build -o watgbridge_android_armv7 .

      - name: Get Project Version
        id: get_version
        run: |
          echo "version=$(grep -oP 'WATGBRIDGE_VERSION = \"\K[0-9]+\.[0-9]+\.[0-9]+' state/state.go)" >> $GITHUB_OUTPUT

      - name: Create Release for android-armv7
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          files: ./watgbridge_android_armv7
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
